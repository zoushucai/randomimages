# 使用 . 或绝对路径，请注意 `tmp_dir` 目录必须在 `root` 目录下
root = "."
testdata_dir = "testdata"
tmp_dir = "tmp"

[build]
args_bin = []
bin = "./tmp/main" #执行的命令
# pre_cmd = [] #在 cmd执行前执行的命令

pre_cmd = ["swag fmt", "swag init"]
post_cmd = []                       #在 cmd执行后执行的命令
# cmd 就是保存文件是触发的命令, 
# 只需要写你平常编译使用的shell命令。你也可以使用 `make`
# Windows平台示例: cmd = "go build -o tmp\main.exe ."
# mac 默认: cmd = "go build -o ./tmp/main ."
# post_cmd = ["echo 'hello air' > post_cmd.txt"] #在 cmd执行后执行的命令
cmd = "go build -o tmp/main ."
delay = 1000                   # 当文件变化后, 延迟多少毫秒后执行cmd命令
# 忽略这些文件扩展名或目录
exclude_dir = ["assets", "tmp", "vendor", "testdata", "docs"]
exclude_file = []
exclude_regex = ["_test.go"]
exclude_unchanged = false
follow_symlink = false
full_bin = ""
# 监听以下指定目录的文件
include_dir = []
# 监听以下文件扩展名的文件. 当监听到文件变化时, 将会cmd 命令
include_ext = ["go", "tpl", "tmpl", "html"]
include_file = []
kill_delay = "0s"
log = "build-errors.log"                    # air的日志文件名，该日志文件放置在你的`tmp_dir`中
poll = false
poll_interval = 0
rerun = false
rerun_delay = 500
send_interrupt = false
stop_on_error = false

# 自定义每个部分显示的颜色。如果找不到颜色，使用原始的应用程序日志。
[color]
app = ""
build = "yellow"
main = "magenta"
runner = "green"
watcher = "cyan"

[log]
main_only = false
time = true       # 显示日志时间


[misc]
clean_on_exit = false # 退出时删除tmp目录

[proxy]
app_port = 0
enabled = false
proxy_port = 0

[screen]
clear_on_rebuild = false
keep_scroll = true
