name: push dockerhub
## 参考: https://github.com/docker/build-push-action
on:
  push:
    # branches:
    #   - main # 触发的分支，可以根据需要修改
    tags:
      - "*"
permissions:
  contents: write

jobs:
  push_dockerhub:
    runs-on: ubuntu-latest

    steps:
      ##### Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # # 内置的变量
          # token: ${{ github.token }}
      #### Add support for more platforms with QEMU (optional)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      ##### 基于仓库信息, 利用 docker/metadata-action 获取元数据
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # 指定要推送的镜像名称(可以有多个)
          images: |
            qqzsc/randomimages
          # 定义生成标签的规则
          tags: |
            ## 根据 tag 触发的事件(符合某些标准才行),输出原始标签
            type=semver,pattern={{raw}}
            ## 根据 git 引用中的 tag 生成标签, 如果此次提交没有标签,则不会生成标签
            type=ref,event=tag
            ## 产生一个 latest 标签(根据某些条件会自己产生)
            type=raw,value=latest,enable={{is_default_branch}}

      #####  Login to Docker Hub (发布镜像到Docker Hub)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          # 需要再 docker hub 中去创建 token,然后填写到secrets中 (docker hub token)
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      ##### 发布镜像
      - name: Build and Push Container image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          # #利用 context 可以指定构建上下文，默认情况下，上下文是当前工作目录
          # platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          ## 这里的tags 是对应 docker hub 镜像仓库的 tag (前提一定要在 docker hub 中创建好对应的仓库)
          ### 上面的 tags 的值是从 docker/metadata-action 中获取的, 当然也可以直接写死
          # tags: qqzsc/randomimages:latest
          # 如果这个仓库是私有仓库,那么需要添加 secrets并设置 GIT_AUTH_TOKEN
          # secrets: |
          #   GIT_AUTH_TOKEN=${{ secrets.MY_GITHUB_TOKEN }}
